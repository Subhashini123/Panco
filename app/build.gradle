plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    buildFeatures {
        dataBinding = true
    }
    defaultConfig {
        applicationId "co.plano"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 83
        versionName "4.0.3"
        multiDexEnabled true
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        staging {
            initWith debug
            applicationIdSuffix ".staging"
            buildConfigField 'String', 'BASE_URL', constant.BASE_URL_STAGING
            manifestPlaceholders = [crashlyticsApiKey: constant.crashlyticsApiKeyStaging]
            buildConfigField 'Boolean', 'enableCrashlytics', 'true'
        }
        production {
            initWith release
            buildConfigField 'String', 'BASE_URL', constant.BASE_URL_PRODUCTION
            manifestPlaceholders = [crashlyticsApiKey: constant.crashlyticsApiKeyProduction]
            buildConfigField 'Boolean', 'enableCrashlytics', 'true'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def appName = "plano"
            def buildType = variant.buildType.name
            def date = new Date()
            def formattedDate = date.format('yyyyMMdd')
            def newName = "${appName}-${buildType}-${formattedDate}.apk"
            outputFileName = new File(newName)
        }
    }

    tasks.whenTaskAdded { task ->
        if (task.name.startsWith("bundle")) {

            if (task.name == "bundleStaging") {
                def renameTaskName = "rename${task.name.capitalize()}Aab"
                def flavor = task.name.substring("bundle".length()).uncapitalize()
                tasks.create(renameTaskName, Copy) {
                    def path = "${buildDir}/outputs/bundle/staging/"
                    from(path)
                    include "app-staging.aab"
                    destinationDir file(path)
                    applicationVariants.all { variant ->
                        variant.outputs.each { output ->
                            def project = "plano"
                            def separator = "_"
                            def versionName = variant.versionName
                            def versionCode = variant.versionCode
                            def date = new Date()
                            def formattedDate = date.format('yyyyMMdd')
                            def newApkName = project + separator + "v" + versionName + separator + versionCode + separator + flavor + separator + formattedDate + ".aab"
                            rename "app-staging.aab", newApkName
                        }
                    }

                }
                task.finalizedBy(renameTaskName)

            } else if (task.name == "bundleProduction") {
                def renameTaskName = "rename${task.name.capitalize()}Aab"
                def flavor = task.name.substring("bundle".length()).uncapitalize()
                tasks.create(renameTaskName, Copy) {
                    def path = "${buildDir}/outputs/bundle/production/"
                    from(path)
                    include "app-production.aab"
                    destinationDir file(path)
                    applicationVariants.all { variant ->
                        variant.outputs.each { output ->
                            def project = "plano"
                            def separator = "_"
                            def versionName = variant.versionName
                            def versionCode = variant.versionCode
                            def date = new Date()
                            def formattedDate = date.format('yyyyMMdd')
                            def newApkName = project + separator + "v" + versionName + separator + versionCode + separator + flavor + separator + formattedDate + ".aab"
                            rename "app-production.aab", newApkName
                        }
                    }

                }
                task.finalizedBy(renameTaskName)
            }
        }
    }

    lintOptions {

        checkReleaseBuilds false

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}


dependencies {
    implementation dependenciesList.kotlin
    implementation dependenciesList.ktx
    implementation dependenciesList.appcompatlib
    implementation dependenciesList.material
    implementation dependenciesList.constraintlayout
    implementation 'nl.psdcompany:duo-navigation-drawer:3.0.0'
    implementation project(':woopraAndroidSDK')
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.navigation:navigation-fragment:2.2.2'
    implementation 'androidx.navigation:navigation-ui:2.2.2'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.2'
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
}